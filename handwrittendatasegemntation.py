# -*- coding: utf-8 -*-
"""Copy of HAndwritten_data_segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YGzmEJ3aDq7j1DEsIYi894qMIRARiLNn
"""

import cv2
import numpy as np


def process_notebook_image(image_path, output_path):
    image = cv2.imread(image_path)
    if image is None:
        print(f"Error: Could not load image from {image_path}. Please check the file path.")
        return  #


    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)

    horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (40, 1))
    horizontal_detect = cv2.morphologyEx(binary, cv2.MORPH_OPEN, horizontal_kernel, iterations=2)
    contours, _ = cv2.findContours(horizontal_detect, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    for contour in contours:
        cv2.drawContours(binary, [contour], -1, (0, 0, 0), 3)

    # Detect and remove vertical lines
    vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 40))
    vertical_detect = cv2.morphologyEx(binary, cv2.MORPH_OPEN, vertical_kernel, iterations=2)
    contours, _ = cv2.findContours(vertical_detect, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    for contour in contours:
        cv2.drawContours(binary, [contour], -1, (0, 0, 0), 3)


    kernel = np.ones((2, 2), np.uint8)
    cleaned_binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)
    cleaned_binary = cv2.morphologyEx(cleaned_binary, cv2.MORPH_OPEN, kernel)

    final_result = cv2.bitwise_not(cleaned_binary)
    cv2.imwrite(output_path, final_result)
input_image_path = '/content/handwritten1.jpg'


output_image_path = '/content/new.jpg'

process_notebook_image(input_image_path, output_image_path)